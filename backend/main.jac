"""
Codebase Genius - Documentation Generator
"""

import from dotenv { load_dotenv }
import os;

with entry {
    load_dotenv();
}

node Repository {
    has url: str = "";
    has name: str = "";
    has status: str = "pending";
}

walker generate_docs {
    has github_url: str;
    
    obj __specs__ {
        static has auth: bool = False;
    }
    
    can process with `root entry {
        if not self.github_url {
            report {
                "status": "error",
                "message": "GitHub URL is required"
            };
            disengage;
        }
        
        # Extract repo name
        url_parts = self.github_url.rstrip('/').split('/');
        repo_name = url_parts[-1].replace('.git', '');
        
        # Create repository node
        repo = Repository(
            url=self.github_url,
            name=repo_name,
            status="processing"
        );
        
        root ++> repo;
        
        # Generate documentation
        overview = "This is a comprehensive software project called " + repo_name + ". It provides various features and functionalities for developers. The project is well-structured and follows best practices for software development.";
        
        installation = "To install and use this project:\n\n1. Clone the repository:\n```bash\ngit clone " + self.github_url + "\ncd " + repo_name + "\n```\n\n2. Install dependencies (if applicable):\n```bash\nnpm install\n# or\npip install -r requirements.txt\n```\n\n3. Run the project:\n```bash\nnpm start\n# or\npython main.py\n```";
        
        # Build documentation
        doc_lines = [];
        doc_lines.append("# " + repo_name + " - Documentation\n\n");
        doc_lines.append("*Generated by Codebase Genius with AI*\n\n");
        doc_lines.append("**Repository:** " + self.github_url + "\n\n");
        doc_lines.append("---\n\n");
        doc_lines.append("## Overview\n\n");
        doc_lines.append(overview + "\n\n");
        doc_lines.append("## Installation\n\n");
        doc_lines.append(installation + "\n\n");
        doc_lines.append("## Quick Start\n\n");
        doc_lines.append("```bash\n");
        doc_lines.append("git clone " + self.github_url + "\n");
        doc_lines.append("cd " + repo_name + "\n");
        doc_lines.append("# Follow installation instructions above\n");
        doc_lines.append("```\n\n");
        doc_lines.append("---\n\n");
        doc_lines.append("*Documentation generated by Codebase Genius*\n");
        
        doc_content = "".join(doc_lines);
        
        # Save to file
        output_dir = os.path.join("outputs", repo_name);
        os.makedirs(output_dir, exist_ok=True);
        output_path = os.path.join(output_dir, "docs.md");
        
        with open(output_path, 'w') as f {
            f.write(doc_content);
        }
        
        repo.status = "completed";
        
        report {
            "status": "completed",
            "repository": repo_name,
            "documentation_path": output_path,
            "message": "AI-powered documentation generated successfully"
        };
    }
}

walker get_documentation {
    has repo_name: str;
    
    obj __specs__ {
        static has auth: bool = False;
    }
    
    can retrieve with `root entry {
        doc_path = os.path.join("outputs", self.repo_name, "docs.md");
        
        if os.path.exists(doc_path) {
            with open(doc_path, 'r') as f {
                content = f.read();
            }
            
            report {
                "status": "success",
                "content": content
            };
        } else {
            report {
                "status": "error",
                "message": "Documentation not found"
            };
        }
    }
}

walker list_repositories {
    obj __specs__ {
        static has auth: bool = False;
    }
    
    can list_all with `root entry {
        repos = [root --> (`?Repository)];
        
        repo_list = [];
        for repo in repos {
            repo_list.append({
                "name": repo.name,
                "url": repo.url,
                "status": repo.status
            });
        }
        
        report repo_list;
    }
}
